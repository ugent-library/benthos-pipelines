input:
  label: ""
  mongodb:
    url: ${MONGODB_URL}
    database: ${MONGODB_DB}
    collection: ${MONGODB_COLLECTION}
    operation: aggregate
    query: | 
      root = [
          {
            "$sort": {
              "date_created": 1
            }
          }
        ]

pipeline:
  threads: 1
  processors:
    - branch:
        request_map: 'root = this.soap_message'
        processors:
          - cerif: {}
        result_map: 'root.cerif = this'
    - switch:
        - check: this.cerif.action == "DELETE"
          processors:
              - mapping: |
                  root.action = this.cerif.action
                  root.id = this.cerif.id
                  root.created = this.date_created
                  root.modified = this.date_updated
        - processors:
            - mapping: |
                root.action = this.cerif.action
                root.id = this.cerif.id

                root.created = this.date_created
                root.modified = this.date_updated
                root.action = this.cerif.action

                root.type = "researchProject"

                root.foundingDate = this.cerif.start_date
                root.dissolutionDate = this.cerif.end_date
                
                root.name = if this.cerif.exists("title") {
                   this.cerif.title.apply("translate")
                }
                
                root.description = if this.cerif.exists("abstract") {
                   this.cerif.abstract.apply("translate")
                }

                root.identifier = this.cerif.federated_ids.apply("identifiers")

                root.hasAcronym = this.cerif.acronym.not_null().catch(deleted())

                # root.cerif = this.cerif

                map identifiers {
                  let cf = this.filter(cf -> cf.uri == "/be.ugent/gismo/project/federated-id/")
                  root = if $cf.length() > 0 { $cf.index(0).ids }
                  root = if root.length() > 0 { root.map_each(t -> {
                      "type": "PropertyValue",
                      "value": t.id,
                      "propertyID": t.uri
                  }) }
                }

                map translate {
                  let v = this.filter(t -> t.translation == "o")
                  root = $v.map_each(d -> { 
                    "language": d.lang,
                    "value": d.value
                  })
                }

output:
  switch:
    cases:
      - check: this.action == "UPDATE"
        output:
          http_client:
            url: ${PROJECTS_API_ADD_PROJECT}
            verb: POST
            headers:
              Content-Type: application/json
              X-API-Key: ${PROJECTS_API_KEY}
      - check: this.action == "DELETE"
        output:
          http_client:
            url: ${PROJECTS_API_DELETE_PROJECT}
            verb: POST
            headers:
              Content-Type: application/json
              X-API-Key: ${PROJECTS_API_KEY}
      - output:
          label: ""
          stdout:
            codec: lines